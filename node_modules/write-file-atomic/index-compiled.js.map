{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\n\nvar fs = require('graceful-fs')\nvar chain = require('slide').chain\nvar MurmurHash3 = require('imurmurhash')\nvar extend = Object.assign || require('util')._extend\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = null\n  }\n  if (!options) options = {}\n  fs.realpath(filename, function (_, realname) {\n    _writeFile(realname || filename, data, options, callback)\n  })\n}\nfunction _writeFile (filename, data, options, callback) {\n  var tmpfile = getTmpname(filename)\n\n  if (options.mode && options.chown) {\n    return thenWriteFile()\n  } else {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    return fs.stat(filename, function (err, stats) {\n      if (err || !stats) return thenWriteFile()\n\n      options = extend({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n      return thenWriteFile()\n    })\n  }\n\n  function thenWriteFile () {\n    chain([\n      [writeFileAsync, tmpfile, data, options.mode, options.encoding || 'utf8'],\n      options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid],\n      options.mode && [fs, fs.chmod, tmpfile, options.mode],\n      [fs, fs.rename, tmpfile, filename]\n    ], function (err) {\n      err ? fs.unlink(tmpfile, function () { callback(err) })\n        : callback()\n    })\n  }\n\n  // doing this instead of `fs.writeFile` in order to get the ability to\n  // call `fsync`.\n  function writeFileAsync (file, data, mode, encoding, cb) {\n    fs.open(file, 'w', options.mode, function (err, fd) {\n      if (err) return cb(err)\n      if (Buffer.isBuffer(data)) {\n        return fs.write(fd, data, 0, data.length, 0, syncAndClose)\n      } else if (data != null) {\n        return fs.write(fd, String(data), 0, String(encoding), syncAndClose)\n      } else {\n        return syncAndClose()\n      }\n      function syncAndClose (err) {\n        if (err) return cb(err)\n        fs.fsync(fd, function (err) {\n          if (err) return cb(err)\n          fs.close(fd, cb)\n        })\n      }\n    })\n  }\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename)\n\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename)\n        options = extend({}, options)\n        if (!options.mode) {\n          options.mode = stats.mode\n        }\n        if (!options.chown && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      } catch (ex) {\n        // ignore stat errors\n      }\n    }\n\n    var fd = fs.openSync(tmpfile, 'w', options.mode)\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    fs.fsyncSync(fd)\n    fs.closeSync(fd)\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    if (options.mode) fs.chmodSync(tmpfile, options.mode)\n    fs.renameSync(tmpfile, filename)\n  } catch (err) {\n    try { fs.unlinkSync(tmpfile) } catch (e) {}\n    throw err\n  }\n}\n"]}