{"version":3,"sources":["sync.js"],"names":[],"mappings":"AAAA;;;AAEA,QAAQ,UAAR,GAAqB,IAArB;AACA,IAAI,iBAAiB,SAArB;;AAEA;;;;;;;;;AASA,QAAQ,OAAR,GAAkB;AAChB,QAAM,SAAS,IAAT,CAAc,EAAd,EAAkB,OAAlB,EAA2B,KAA3B,EAAkC;AACtC,QAAI,UAAU,MAAM,OAApB;AACA,QAAI,YAAY,MAAM,KAAtB;AACA,QAAI,aAAa,QAAQ,UAAzB;AACA,QAAI,OAAO,QAAQ,GAAnB;;AAEA,QAAI,CAAC,UAAD,IAAe,CAAC,IAApB,EAA0B;AACxB,cAAQ,IAAR,CAAa,iFAAb;AACA;AACD;;AAED,QAAI,CAAC,SAAD,IAAc,CAAC,UAAU,MAA7B,EAAqC;AACnC,cAAQ,IAAR,CAAa,2CAAb;AACA;AACD;;AAED,QAAI,iBAAiB,QAAQ,MAAR,CAAe,UAAf,EAA2B,UAAU,GAAV,EAAe;AAC7D,gBAAU,IAAV,IAAkB,GAAlB;AACD,KAFoB,CAArB;;AAIA,QAAI,mBAAmB,UAAU,MAAV,CAAiB,IAAjB,EAAuB,UAAU,GAAV,EAAe;AAC3D,cAAQ,UAAR,IAAsB,GAAtB;AACD,KAFsB,CAAvB;;AAIA,2BAAsB,SAAtB,EAAiC,cAAjC,EAAiD;AAC/C,aAAO;AACL,wBAAgB,cADX;AAEL,0BAAkB;AAFb,OADwC;AAK/C,kBAAY;AALmC,KAAjD;AAOD,GAhCe;AAiChB,UAAQ,SAAS,MAAT,CAAgB,EAAhB,EAAoB,OAApB,EAA6B,KAA7B,EAAoC;AAC1C,QAAI,YAAY,MAAM,KAAtB;AACA,QAAI,aAAa,UAAU,cAAV,CAAjB,EAA4C;AAC1C,UAAI,wBAAwB,UAAU,cAAV,CAA5B;AAAA,UACI,iBAAiB,sBAAsB,cAD3C;AAAA,UAEI,mBAAmB,sBAAsB,gBAF7C;;AAIA,wBAAkB,gBAAlB;AACA,0BAAoB,kBAApB;AACD;AACF;AA3Ce,CAAlB","file":"sync-compiled.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nvar SYNC_HOOK_PROP = '$v-sync';\n\n/**\n * v-sync directive\n *\n * Usage:\n *  v-sync:component-prop=\"context prop name\"\n *\n * If your want to sync component's prop \"visible\" to context prop \"myVisible\", use like this:\n *  v-sync:visible=\"myVisible\"\n */\nexports.default = {\n  bind: function bind(el, binding, vnode) {\n    var context = vnode.context;\n    var component = vnode.child;\n    var expression = binding.expression;\n    var prop = binding.arg;\n\n    if (!expression || !prop) {\n      console.warn('v-sync should specify arg & expression, for example: v-sync:visible=\"myVisible\"');\n      return;\n    }\n\n    if (!component || !component.$watch) {\n      console.warn('v-sync is only available on Vue Component');\n      return;\n    }\n\n    var unwatchContext = context.$watch(expression, function (val) {\n      component[prop] = val;\n    });\n\n    var unwatchComponent = component.$watch(prop, function (val) {\n      context[expression] = val;\n    });\n\n    Object.defineProperty(component, SYNC_HOOK_PROP, {\n      value: {\n        unwatchContext: unwatchContext,\n        unwatchComponent: unwatchComponent\n      },\n      enumerable: false\n    });\n  },\n  unbind: function unbind(el, binding, vnode) {\n    var component = vnode.child;\n    if (component && component[SYNC_HOOK_PROP]) {\n      var _component$SYNC_HOOK_ = component[SYNC_HOOK_PROP],\n          unwatchContext = _component$SYNC_HOOK_.unwatchContext,\n          unwatchComponent = _component$SYNC_HOOK_.unwatchComponent;\n\n      unwatchContext && unwatchContext();\n      unwatchComponent && unwatchComponent();\n    }\n  }\n};"]}