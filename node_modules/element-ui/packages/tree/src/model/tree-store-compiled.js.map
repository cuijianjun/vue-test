{"version":3,"sources":["tree-store.js"],"names":[],"mappings":"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","file":"tree-store-compiled.js","sourcesContent":["import Node from './node';\nimport { getNodeKey } from './util';\n\nexport default class TreeStore {\n  constructor(options) {\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n\n    this.root = new Node({\n      data: this.data,\n      store: this\n    });\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load;\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data);\n        this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  filter(value) {\n    const filterNodeMethod = this.filterNodeMethod;\n    const traverse = function(node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n\n        traverse(child);\n      });\n\n      if (!node.visible && childNodes.length) {\n        let allHidden = true;\n\n        childNodes.forEach((child) => {\n          if (child.visible) allHidden = false;\n        });\n\n        if (node.root) {\n          node.root.visible = allHidden === false;\n        } else {\n          node.visible = allHidden === false;\n        }\n      }\n\n      if (node.visible && !node.isLeaf) node.expand();\n    };\n\n    traverse(this);\n  }\n\n  setData(newVal) {\n    const instanceChanged = newVal !== this.root.data;\n    this.root.setData(newVal);\n    if (instanceChanged) {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  getNode(data) {\n    const key = typeof data !== 'object' ? data : getNodeKey(this.key, data);\n    return this.nodesMap[key];\n  }\n\n  insertBefore(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertBefore({ data }, refNode);\n  }\n\n  insertAfter(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertAfter({ data }, refNode);\n  }\n\n  remove(data) {\n    const node = this.getNode(data);\n    if (node) {\n      node.parent.removeChild(node);\n    }\n  }\n\n  append(data, parentData) {\n    const parentNode = parentData ? this.getNode(parentData) : this.root;\n\n    if (parentNode) {\n      parentNode.insertChild({ data });\n    }\n  }\n\n  _initDefaultCheckedNodes() {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    const nodesMap = this.nodesMap;\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey];\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    });\n  }\n\n  _initDefaultCheckedNode(node) {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n    if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  }\n\n  setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  registerNode(node) {\n    const key = this.key;\n    if (!key || !node || !node.data) return;\n\n    const nodeKey = node.key;\n    if (nodeKey !== undefined) this.nodesMap[node.key] = node;\n  }\n\n  deregisterNode(node) {\n    const key = this.key;\n    if (!key || !node || !node.data) return;\n\n    delete this.nodesMap[node.key];\n  }\n\n  getCheckedNodes(leafOnly = false) {\n    const checkedNodes = [];\n    const traverse = function(node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n\n      childNodes.forEach((child) => {\n        if ((!leafOnly && child.checked) || (leafOnly && child.isLeaf && child.checked)) {\n          checkedNodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n\n    return checkedNodes;\n  }\n\n  getCheckedKeys(leafOnly = false) {\n    const key = this.key;\n    const allNodes = this._getAllNodes();\n    const keys = [];\n    allNodes.forEach((node) => {\n      if (!leafOnly || (leafOnly && node.isLeaf)) {\n        if (node.checked) {\n          keys.push((node.data || {})[key]);\n        }\n      }\n    });\n    return keys;\n  }\n\n  _getAllNodes() {\n    const allNodes = [];\n    const nodesMap = this.nodesMap;\n    for (let nodeKey in nodesMap) {\n      if (nodesMap.hasOwnProperty(nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n\n    return allNodes;\n  }\n\n  _setCheckedKeys(key, leafOnly = false, checkedKeys) {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level);\n    const cache = Object.create(null);\n    const keys = Object.keys(checkedKeys);\n    allNodes.forEach(node => node.setChecked(false, false));\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i];\n      const nodeKey = node.data[key].toString();\n      let checked = keys.indexOf(nodeKey) > -1;\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false);\n        }\n        continue;\n      }\n\n      let parent = node.parent;\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true;\n        parent = parent.parent;\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false);\n        continue;\n      }\n      node.setChecked(true, true);\n\n      if (leafOnly) {\n        node.setChecked(false, false);\n        const traverse = function(node) {\n          const childNodes = node.childNodes;\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false);\n            }\n            traverse(child);\n          });\n        };\n        traverse(node);\n      }\n    }\n  }\n\n  setCheckedNodes(array, leafOnly = false) {\n    const key = this.key;\n    const checkedKeys = {};\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n\n  setCheckedKeys(keys, leafOnly = false) {\n    this.defaultCheckedKeys = keys;\n    const key = this.key;\n    const checkedKeys = {};\n    keys.forEach((key) => {\n      checkedKeys[key] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n\n  setDefaultExpandedKeys(keys) {\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n\n    keys.forEach((key) => {\n      const node = this.getNode(key);\n      if (node) node.expand(null, this.autoExpandParent);\n    });\n  }\n\n  setChecked(data, checked, deep) {\n    const node = this.getNode(data);\n\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  }\n\n  getCurrentNode() {\n    return this.currentNode;\n  }\n\n  setCurrentNode(node) {\n    this.currentNode = node;\n  }\n\n  setCurrentNodeKey(key) {\n    const node = this.getNode(key);\n    if (node) {\n      this.currentNode = node;\n    }\n  }\n};\n"]}