{"version":3,"sources":["calcTextareaHeight.js"],"names":[],"mappings":"AAAA,IAAI,uBAAJ;;AAEA,IAAM,oNAAN;;AAUA,IAAM,gBAAgB,CACpB,gBADoB,EAEpB,aAFoB,EAGpB,aAHoB,EAIpB,gBAJoB,EAKpB,aALoB,EAMpB,aANoB,EAOpB,WAPoB,EAQpB,gBARoB,EASpB,gBAToB,EAUpB,OAVoB,EAWpB,aAXoB,EAYpB,cAZoB,EAapB,eAboB,EAcpB,cAdoB,EAepB,YAfoB,CAAtB;;AAkBA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAClC,MAAM,QAAQ,OAAO,gBAAP,CAAwB,IAAxB,CAAd;;AAEA,MAAM,YAAY,MAAM,gBAAN,CAAuB,YAAvB,CAAlB;;AAEA,MAAM,cACJ,WAAW,MAAM,gBAAN,CAAuB,gBAAvB,CAAX,IACA,WAAW,MAAM,gBAAN,CAAuB,aAAvB,CAAX,CAFF;;AAKA,MAAM,aACJ,WAAW,MAAM,gBAAN,CAAuB,qBAAvB,CAAX,IACA,WAAW,MAAM,gBAAN,CAAuB,kBAAvB,CAAX,CAFF;;AAKA,MAAM,eAAe,cAClB,GADkB,CACd;AAAA,WAAW,IAAX,SAAmB,MAAM,gBAAN,CAAuB,IAAvB,CAAnB;AAAA,GADc,EAElB,IAFkB,CAEb,GAFa,CAArB;;AAIA,SAAO,EAAE,0BAAF,EAAgB,wBAAhB,EAA6B,sBAA7B,EAAyC,oBAAzC,EAAP;AACD;;AAED,eAAe,SAAS,kBAAT,CACb,UADa,EAIb;AAAA,MAFA,OAEA,uEAFU,IAEV;AAAA,MADA,OACA,uEADU,IACV;;AACA,MAAI,CAAC,cAAL,EAAqB;AACnB,qBAAiB,SAAS,aAAT,CAAuB,UAAvB,CAAjB;AACA,aAAS,IAAT,CAAc,WAAd,CAA0B,cAA1B;AACD;;AAJD,8BAWI,qBAAqB,UAArB,CAXJ;AAAA,MAOE,WAPF,yBAOE,WAPF;AAAA,MAQE,UARF,yBAQE,UARF;AAAA,MASE,SATF,yBASE,SATF;AAAA,MAUE,YAVF,yBAUE,YAVF;;AAaA,iBAAe,YAAf,CAA4B,OAA5B,EAAwC,YAAxC,SAAwD,YAAxD;AACA,iBAAe,KAAf,GAAuB,WAAW,KAAX,IAAoB,WAAW,WAA/B,IAA8C,EAArE;;AAEA,MAAI,SAAS,eAAe,YAA5B;;AAEA,MAAI,cAAc,YAAlB,EAAgC;AAC9B,aAAS,SAAS,UAAlB;AACD,GAFD,MAEO,IAAI,cAAc,aAAlB,EAAiC;AACtC,aAAS,SAAS,WAAlB;AACD;;AAED,iBAAe,KAAf,GAAuB,EAAvB;AACA,MAAI,kBAAkB,eAAe,YAAf,GAA8B,WAApD;;AAEA,MAAI,YAAY,IAAhB,EAAsB;AACpB,QAAI,YAAY,kBAAkB,OAAlC;AACA,QAAI,cAAc,YAAlB,EAAgC;AAC9B,kBAAY,YAAY,WAAZ,GAA0B,UAAtC;AACD;AACD,aAAS,KAAK,GAAL,CAAS,SAAT,EAAoB,MAApB,CAAT;AACD;AACD,MAAI,YAAY,IAAhB,EAAsB;AACpB,QAAI,YAAY,kBAAkB,OAAlC;AACA,QAAI,cAAc,YAAlB,EAAgC;AAC9B,kBAAY,YAAY,WAAZ,GAA0B,UAAtC;AACD;AACD,aAAS,KAAK,GAAL,CAAS,SAAT,EAAoB,MAApB,CAAT;AACD;;AAED,SAAO,EAAE,QAAQ,SAAS,IAAnB,EAAP;AACD","file":"calcTextareaHeight-compiled.js","sourcesContent":["let hiddenTextarea;\n\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n`;\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing'\n];\n\nfunction calculateNodeStyling(node) {\n  const style = window.getComputedStyle(node);\n\n  const boxSizing = style.getPropertyValue('box-sizing');\n\n  const paddingSize = (\n    parseFloat(style.getPropertyValue('padding-bottom')) +\n    parseFloat(style.getPropertyValue('padding-top'))\n  );\n\n  const borderSize = (\n    parseFloat(style.getPropertyValue('border-bottom-width')) +\n    parseFloat(style.getPropertyValue('border-top-width'))\n  );\n\n  const contextStyle = CONTEXT_STYLE\n    .map(name => `${name}:${style.getPropertyValue(name)}`)\n    .join(';');\n\n  return { contextStyle, paddingSize, borderSize, boxSizing };\n}\n\nexport default function calcTextareaHeight(\n  targetNode,\n  minRows = null,\n  maxRows = null\n) {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  let {\n    paddingSize,\n    borderSize,\n    boxSizing,\n    contextStyle\n  } = calculateNodeStyling(targetNode);\n\n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`);\n  hiddenTextarea.value = targetNode.value || targetNode.placeholder || '';\n\n  let height = hiddenTextarea.scrollHeight;\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize;\n  }\n\n  hiddenTextarea.value = '';\n  let singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n  if (minRows !== null) {\n    let minHeight = singleRowHeight * minRows;\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n    height = Math.max(minHeight, height);\n  }\n  if (maxRows !== null) {\n    let maxHeight = singleRowHeight * maxRows;\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n    height = Math.min(maxHeight, height);\n  }\n\n  return { height: height + 'px'};\n};\n"]}