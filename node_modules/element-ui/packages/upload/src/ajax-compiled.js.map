{"version":3,"sources":["ajax.js"],"names":[],"mappings":";AAAA,SAAS,QAAT,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,MAAI,YAAJ;AACA,MAAI,IAAI,QAAR,EAAkB;AAChB,UAAS,IAAI,MAAb,UAAuB,IAAI,QAAJ,CAAa,KAAb,IAAsB,IAAI,QAAjD;AACD,GAFD,MAEO,IAAI,IAAI,YAAR,EAAsB;AAC3B,UAAS,IAAI,MAAb,SAAuB,IAAI,YAA3B;AACD,GAFM,MAEA;AACL,4BAAsB,MAAtB,SAAgC,IAAI,MAApC;AACD;;AAED,MAAM,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAZ;AACA,MAAI,MAAJ,GAAa,IAAI,MAAjB;AACA,MAAI,MAAJ,GAAa,MAAb;AACA,MAAI,GAAJ,GAAU,MAAV;AACA,SAAO,GAAP;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,MAAM,OAAO,IAAI,YAAJ,IAAoB,IAAI,QAArC;AACA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAI;AACF,WAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAED,eAAe,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACrC,MAAI,OAAO,cAAP,KAA0B,WAA9B,EAA2C;AACzC;AACD;;AAED,MAAM,MAAM,IAAI,cAAJ,EAAZ;AACA,MAAM,SAAS,OAAO,MAAtB;;AAEA,MAAI,IAAI,MAAR,EAAgB;AACd,QAAI,MAAJ,CAAW,UAAX,GAAwB,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AAC3C,UAAI,EAAE,KAAF,GAAU,CAAd,EAAiB;AACf,UAAE,OAAF,GAAY,EAAE,MAAF,GAAW,EAAE,KAAb,GAAqB,GAAjC;AACD;AACD,aAAO,UAAP,CAAkB,CAAlB;AACD,KALD;AAMD;;AAED,MAAM,WAAW,IAAI,QAAJ,EAAjB;;AAEA,MAAI,OAAO,IAAX,EAAiB;AACf,iBAAY,OAAO,IAAnB,EAAyB,GAAzB,CAA6B,eAAO;AAClC,eAAS,MAAT,CAAgB,GAAhB,EAAqB,OAAO,IAAP,CAAY,GAAZ,CAArB;AACD,KAFD;AAGD;;AAED,WAAS,MAAT,CAAgB,OAAO,QAAvB,EAAiC,OAAO,IAAxC;;AAEA,MAAI,OAAJ,GAAc,SAAS,KAAT,CAAe,CAAf,EAAkB;AAC9B,WAAO,OAAP,CAAe,CAAf;AACD,GAFD;;AAIA,MAAI,MAAJ,GAAa,SAAS,MAAT,GAAkB;AAC7B,QAAI,IAAI,MAAJ,GAAa,GAAb,IAAoB,IAAI,MAAJ,IAAc,GAAtC,EAA2C;AACzC,aAAO,OAAO,OAAP,CAAe,SAAS,MAAT,EAAiB,MAAjB,EAAyB,GAAzB,CAAf,CAAP;AACD;;AAED,WAAO,SAAP,CAAiB,QAAQ,GAAR,CAAjB;AACD,GAND;;AAQA,MAAI,IAAJ,CAAS,MAAT,EAAiB,MAAjB,EAAyB,IAAzB;;AAEA,MAAI,OAAO,eAAP,IAA0B,qBAAqB,GAAnD,EAAwD;AACtD,QAAI,eAAJ,GAAsB,IAAtB;AACD;;AAED,MAAM,UAAU,OAAO,OAAP,IAAkB,EAAlC;;AAEA,OAAK,IAAI,IAAT,IAAiB,OAAjB,EAA0B;AACxB,QAAI,QAAQ,cAAR,CAAuB,IAAvB,KAAgC,QAAQ,IAAR,MAAkB,IAAtD,EAA4D;AAC1D,UAAI,gBAAJ,CAAqB,IAArB,EAA2B,QAAQ,IAAR,CAA3B;AACD;AACF;AACD,MAAI,IAAJ,CAAS,QAAT;AACA,SAAO,GAAP;AACD","file":"ajax-compiled.js","sourcesContent":["function getError(action, option, xhr) {\n  let msg;\n  if (xhr.response) {\n    msg = `${xhr.status} ${xhr.response.error || xhr.response}`;\n  } else if (xhr.responseText) {\n    msg = `${xhr.status} ${xhr.responseText}`;\n  } else {\n    msg = `fail to post ${action} ${xhr.status}`;\n  }\n\n  const err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  const text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nexport default function upload(option) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return;\n  }\n\n  const xhr = new XMLHttpRequest();\n  const action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n      option.onProgress(e);\n    };\n  }\n\n  const formData = new FormData();\n\n  if (option.data) {\n    Object.keys(option.data).map(key => {\n      formData.append(key, option.data[key]);\n    });\n  }\n\n  formData.append(option.filename, option.file);\n\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  };\n\n  xhr.open('post', action, true);\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  const headers = option.headers || {};\n\n  for (let item in headers) {\n    if (headers.hasOwnProperty(item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item]);\n    }\n  }\n  xhr.send(formData);\n  return xhr;\n}\n"]}