import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import scrollbarWidth from 'element-ui/src/utils/scrollbar-width';

var TableLayout = function () {
  function TableLayout(options) {
    _classCallCheck(this, TableLayout);

    this.table = null;
    this.store = null;
    this.columns = null;
    this.fit = true;
    this.showHeader = true;

    this.height = null;
    this.scrollX = false;
    this.scrollY = false;
    this.bodyWidth = null;
    this.fixedWidth = null;
    this.rightFixedWidth = null;
    this.tableHeight = null;
    this.headerHeight = 44; // Table Header Height
    this.footerHeight = 44; // Table Footer Height
    this.viewportHeight = null; // Table Height - Scroll Bar Height
    this.bodyHeight = null; // Table Height - Table Header Height
    this.fixedBodyHeight = null; // Table Height - Table Header Height - Scroll Bar Height
    this.gutterWidth = scrollbarWidth();

    for (var name in options) {
      if (options.hasOwnProperty(name)) {
        this[name] = options[name];
      }
    }

    if (!this.table) {
      throw new Error('table is required for Table Layout');
    }
    if (!this.store) {
      throw new Error('store is required for Table Layout');
    }
  }

  _createClass(TableLayout, [{
    key: 'updateScrollY',
    value: function updateScrollY() {
      var height = this.height;
      if (typeof height !== 'string' && typeof height !== 'number') return;
      var bodyWrapper = this.table.bodyWrapper;
      if (this.table.$el && bodyWrapper) {
        var body = bodyWrapper.querySelector('.el-table__body');
        this.scrollY = body.offsetHeight > bodyWrapper.offsetHeight;
      }
    }
  }, {
    key: 'setHeight',
    value: function setHeight(value) {
      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'height';

      var el = this.table.$el;
      if (typeof value === 'string' && /^\d+$/.test(value)) {
        value = Number(value);
      }

      this.height = value;

      if (!el) return;
      if (typeof value === 'number') {
        el.style[prop] = value + 'px';

        this.updateHeight();
      } else if (typeof value === 'string') {
        if (value === '') {
          el.style[prop] = '';
        }
        this.updateHeight();
      }
    }
  }, {
    key: 'setMaxHeight',
    value: function setMaxHeight(value) {
      return this.setHeight(value, 'max-height');
    }
  }, {
    key: 'updateHeight',
    value: function updateHeight() {
      var height = this.tableHeight = this.table.$el.clientHeight;
      var noData = !this.table.data || this.table.data.length === 0;
      var _table$$refs = this.table.$refs,
          headerWrapper = _table$$refs.headerWrapper,
          footerWrapper = _table$$refs.footerWrapper;

      var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
      if (this.showHeader && !headerWrapper) return;
      if (!this.showHeader) {
        this.headerHeight = 0;
        if (this.height !== null && (!isNaN(this.height) || typeof this.height === 'string')) {
          this.bodyHeight = height - footerHeight + (footerWrapper ? 1 : 0);
        }
        this.fixedBodyHeight = this.scrollX ? height - this.gutterWidth : height;
      } else {
        var headerHeight = this.headerHeight = headerWrapper.offsetHeight;
        var bodyHeight = height - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
        if (this.height !== null && (!isNaN(this.height) || typeof this.height === 'string')) {
          this.bodyHeight = bodyHeight;
        }
        this.fixedBodyHeight = this.scrollX ? bodyHeight - this.gutterWidth : bodyHeight;
      }
      this.viewportHeight = this.scrollX ? height - (noData ? 0 : this.gutterWidth) : height;
    }
  }, {
    key: 'update',
    value: function update() {
      var fit = this.fit;
      var columns = this.table.columns;
      var bodyWidth = this.table.$el.clientWidth;
      var bodyMinWidth = 0;

      var flattenColumns = [];
      columns.forEach(function (column) {
        if (column.isColumnGroup) {
          flattenColumns.push.apply(flattenColumns, column.columns);
        } else {
          flattenColumns.push(column);
        }
      });

      var flexColumns = flattenColumns.filter(function (column) {
        return typeof column.width !== 'number';
      });

      if (flexColumns.length > 0 && fit) {
        flattenColumns.forEach(function (column) {
          bodyMinWidth += column.width || column.minWidth || 80;
        });

        if (bodyMinWidth < bodyWidth - this.gutterWidth) {
          // DON'T HAVE SCROLL BAR
          this.scrollX = false;

          var totalFlexWidth = bodyWidth - this.gutterWidth - bodyMinWidth;

          if (flexColumns.length === 1) {
            flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
          } else {
            var allColumnsWidth = flexColumns.reduce(function (prev, column) {
              return prev + (column.minWidth || 80);
            }, 0);
            var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
            var noneFirstWidth = 0;

            flexColumns.forEach(function (column, index) {
              if (index === 0) return;
              var flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);
              noneFirstWidth += flexWidth;
              column.realWidth = (column.minWidth || 80) + flexWidth;
            });

            flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
          }
        } else {
          // HAVE HORIZONTAL SCROLL BAR
          this.scrollX = true;
          flexColumns.forEach(function (column) {
            column.realWidth = column.minWidth;
          });
        }

        this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
      } else {
        flattenColumns.forEach(function (column) {
          if (!column.width && !column.minWidth) {
            column.realWidth = 80;
          } else {
            column.realWidth = column.width || column.minWidth;
          }

          bodyMinWidth += column.realWidth;
        });
        this.scrollX = bodyMinWidth > bodyWidth;

        this.bodyWidth = bodyMinWidth;
      }

      var fixedColumns = this.store.states.fixedColumns;

      if (fixedColumns.length > 0) {
        var fixedWidth = 0;
        fixedColumns.forEach(function (column) {
          fixedWidth += column.realWidth;
        });

        this.fixedWidth = fixedWidth;
      }

      var rightFixedColumns = this.store.states.rightFixedColumns;
      if (rightFixedColumns.length > 0) {
        var rightFixedWidth = 0;
        rightFixedColumns.forEach(function (column) {
          rightFixedWidth += column.realWidth;
        });

        this.rightFixedWidth = rightFixedWidth;
      }
    }
  }]);

  return TableLayout;
}();

export default TableLayout;

//# sourceMappingURL=table-layout-compiled.js.map