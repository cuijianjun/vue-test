{"version":3,"sources":["urls.js"],"names":[],"mappings":";;AACA;;;;;;;;;;;;;AAaA,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe;AAC9B;AACA,KAAI,WAAW,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAO,QAAvD;;AAEA,KAAI,CAAC,QAAL,EAAe;AACb,QAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAEF;AACA,KAAI,CAAC,GAAD,IAAQ,OAAO,GAAP,KAAe,QAA3B,EAAqC;AACnC,SAAO,GAAP;AACA;;AAED,KAAI,UAAU,SAAS,QAAT,GAAoB,IAApB,GAA2B,SAAS,IAAlD;AACA,KAAI,aAAa,UAAU,SAAS,QAAT,CAAkB,OAAlB,CAA0B,WAA1B,EAAuC,GAAvC,CAA3B;;AAED;AACA;;;;;;;;;;;;;;;;;;;;;;;AAyBA,KAAI,WAAW,IAAI,OAAJ,CAAY,qDAAZ,EAAmE,UAAS,SAAT,EAAoB,OAApB,EAA6B;AAC9G;AACA,MAAI,kBAAkB,QACpB,IADoB,GAEpB,OAFoB,CAEZ,UAFY,EAEA,UAAS,CAAT,EAAY,EAAZ,EAAe;AAAE,UAAO,EAAP;AAAY,GAF7B,EAGpB,OAHoB,CAGZ,UAHY,EAGA,UAAS,CAAT,EAAY,EAAZ,EAAe;AAAE,UAAO,EAAP;AAAY,GAH7B,CAAtB;;AAKA;AACA,MAAI,+CAA+C,IAA/C,CAAoD,eAApD,CAAJ,EAA0E;AACxE,UAAO,SAAP;AACD;;AAED;AACA,MAAI,MAAJ;;AAEA,MAAI,gBAAgB,OAAhB,CAAwB,IAAxB,MAAkC,CAAtC,EAAyC;AACtC;AACF,YAAS,eAAT;AACA,GAHD,MAGO,IAAI,gBAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAArC,EAAwC;AAC9C;AACA,YAAS,UAAU,eAAnB,CAF8C,CAEV;AACpC,GAHM,MAGA;AACN;AACA,YAAS,aAAa,gBAAgB,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,CAAtB,CAFM,CAEsD;AAC5D;;AAED;AACA,SAAO,SAAS,gBAAe,MAAf,CAAT,GAAkC,GAAzC;AACA,EA5Bc,CAAf;;AA8BA;AACA,QAAO,QAAP;AACA,CA1ED","file":"urls-compiled.js","sourcesContent":["\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n"]}