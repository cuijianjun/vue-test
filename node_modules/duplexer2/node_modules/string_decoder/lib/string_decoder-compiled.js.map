{"version":3,"sources":["string_decoder.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,aAAR,EAAuB,MAApC;;AAEA,IAAI,aAAa,OAAO,UAAP,IAAqB,UAAU,QAAV,EAAoB;AACxD,aAAW,KAAK,QAAhB;AACA,UAAQ,YAAY,SAAS,WAAT,EAApB;AACE,SAAK,KAAL,CAAW,KAAK,MAAL,CAAY,KAAK,OAAL,CAAa,KAAK,OAAL,CAAa,KAAK,QAAL,CAAc,KAAK,QAAL,CAAc,KAAK,MAAL,CAAY,KAAK,OAAL,CAAa,KAAK,SAAL,CAAe,KAAK,UAAL,CAAgB,KAAK,KAAL;AACnI,aAAO,IAAP;AACF;AACE,aAAO,KAAP;AAJJ;AAMD,CARD;;AAUA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,MAAI,CAAC,GAAL,EAAU,OAAO,MAAP;AACV,MAAI,OAAJ;AACA,SAAO,IAAP,EAAa;AACX,YAAQ,GAAR;AACE,WAAK,MAAL;AACA,WAAK,OAAL;AACE,eAAO,MAAP;AACF,WAAK,MAAL;AACA,WAAK,OAAL;AACA,WAAK,SAAL;AACA,WAAK,UAAL;AACE,eAAO,SAAP;AACF,WAAK,QAAL;AACA,WAAK,QAAL;AACE,eAAO,QAAP;AACF,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,KAAL;AACE,eAAO,GAAP;AACF;AACE,YAAI,OAAJ,EAAa,OADf,CACuB;AACrB,cAAM,CAAC,KAAK,GAAN,EAAW,WAAX,EAAN;AACA,kBAAU,IAAV;AAnBJ;AAqBD;AACF;;AAED;AACA;AACA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC9B,MAAI,OAAO,mBAAmB,GAAnB,CAAX;AACA,MAAI,OAAO,IAAP,KAAgB,QAAhB,KAA6B,OAAO,UAAP,KAAsB,UAAtB,IAAoC,CAAC,WAAW,GAAX,CAAlE,CAAJ,EAAwF,MAAM,IAAI,KAAJ,CAAU,uBAAuB,GAAjC,CAAN;AACxF,SAAO,QAAQ,GAAf;AACD;;AAED;AACA;AACA;AACA,QAAQ,aAAR,GAAwB,aAAxB;AACA,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC/B,OAAK,QAAL,GAAgB,kBAAkB,QAAlB,CAAhB;AACA,MAAI,EAAJ;AACA,UAAQ,KAAK,QAAb;AACE,SAAK,SAAL;AACE,WAAK,IAAL,GAAY,SAAZ;AACA,WAAK,GAAL,GAAW,QAAX;AACA,WAAK,CAAL;AACA;AACF,SAAK,MAAL;AACE,WAAK,QAAL,GAAgB,YAAhB;AACA,WAAK,CAAL;AACA;AACF,SAAK,QAAL;AACE,WAAK,IAAL,GAAY,UAAZ;AACA,WAAK,GAAL,GAAW,SAAX;AACA,WAAK,CAAL;AACA;AACF;AACE,WAAK,KAAL,GAAa,WAAb;AACA,WAAK,GAAL,GAAW,SAAX;AACA;AAlBJ;AAoBA,OAAK,QAAL,GAAgB,CAAhB;AACA,OAAK,SAAL,GAAiB,CAAjB;AACA,OAAK,QAAL,GAAgB,OAAO,WAAP,CAAmB,EAAnB,CAAhB;AACD;;AAED,cAAc,SAAd,CAAwB,KAAxB,GAAgC,UAAU,GAAV,EAAe;AAC7C,MAAI,IAAI,MAAJ,KAAe,CAAnB,EAAsB,OAAO,EAAP;AACtB,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,KAAK,QAAT,EAAmB;AACjB,QAAI,KAAK,QAAL,CAAc,GAAd,CAAJ;AACA,QAAI,MAAM,SAAV,EAAqB,OAAO,EAAP;AACrB,QAAI,KAAK,QAAT;AACA,SAAK,QAAL,GAAgB,CAAhB;AACD,GALD,MAKO;AACL,QAAI,CAAJ;AACD;AACD,MAAI,IAAI,IAAI,MAAZ,EAAoB,OAAO,IAAI,IAAI,KAAK,IAAL,CAAU,GAAV,EAAe,CAAf,CAAR,GAA4B,KAAK,IAAL,CAAU,GAAV,EAAe,CAAf,CAAnC;AACpB,SAAO,KAAK,EAAZ;AACD,CAdD;;AAgBA,cAAc,SAAd,CAAwB,GAAxB,GAA8B,OAA9B;;AAEA;AACA,cAAc,SAAd,CAAwB,IAAxB,GAA+B,QAA/B;;AAEA;AACA,cAAc,SAAd,CAAwB,QAAxB,GAAmC,UAAU,GAAV,EAAe;AAChD,MAAI,KAAK,QAAL,IAAiB,IAAI,MAAzB,EAAiC;AAC/B,QAAI,IAAJ,CAAS,KAAK,QAAd,EAAwB,KAAK,SAAL,GAAiB,KAAK,QAA9C,EAAwD,CAAxD,EAA2D,KAAK,QAAhE;AACA,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,QAA5B,EAAsC,CAAtC,EAAyC,KAAK,SAA9C,CAAP;AACD;AACD,MAAI,IAAJ,CAAS,KAAK,QAAd,EAAwB,KAAK,SAAL,GAAiB,KAAK,QAA9C,EAAwD,CAAxD,EAA2D,IAAI,MAA/D;AACA,OAAK,QAAL,IAAiB,IAAI,MAArB;AACD,CAPD;;AASA;AACA;AACA,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,MAAI,QAAQ,IAAZ,EAAkB,OAAO,CAAP,CAAlB,KAAgC,IAAI,QAAQ,CAAR,KAAc,IAAlB,EAAwB,OAAO,CAAP,CAAxB,KAAsC,IAAI,QAAQ,CAAR,KAAc,IAAlB,EAAwB,OAAO,CAAP,CAAxB,KAAsC,IAAI,QAAQ,CAAR,KAAc,IAAlB,EAAwB,OAAO,CAAP;AACpI,SAAO,CAAC,CAAR;AACD;;AAED;AACA;AACA;AACA,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,GAAnC,EAAwC,CAAxC,EAA2C;AACzC,MAAI,IAAI,IAAI,MAAJ,GAAa,CAArB;AACA,MAAI,IAAI,CAAR,EAAW,OAAO,CAAP;AACX,MAAI,KAAK,cAAc,IAAI,CAAJ,CAAd,CAAT;AACA,MAAI,MAAM,CAAV,EAAa;AACX,QAAI,KAAK,CAAT,EAAY,KAAK,QAAL,GAAgB,KAAK,CAArB;AACZ,WAAO,EAAP;AACD;AACD,MAAI,EAAE,CAAF,GAAM,CAAV,EAAa,OAAO,CAAP;AACb,OAAK,cAAc,IAAI,CAAJ,CAAd,CAAL;AACA,MAAI,MAAM,CAAV,EAAa;AACX,QAAI,KAAK,CAAT,EAAY,KAAK,QAAL,GAAgB,KAAK,CAArB;AACZ,WAAO,EAAP;AACD;AACD,MAAI,EAAE,CAAF,GAAM,CAAV,EAAa,OAAO,CAAP;AACb,OAAK,cAAc,IAAI,CAAJ,CAAd,CAAL;AACA,MAAI,MAAM,CAAV,EAAa;AACX,QAAI,KAAK,CAAT,EAAY;AACV,UAAI,OAAO,CAAX,EAAc,KAAK,CAAL,CAAd,KAA0B,KAAK,QAAL,GAAgB,KAAK,CAArB;AAC3B;AACD,WAAO,EAAP;AACD;AACD,SAAO,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,GAAnC,EAAwC,CAAxC,EAA2C;AACzC,MAAI,CAAC,IAAI,CAAJ,IAAS,IAAV,MAAoB,IAAxB,EAA8B;AAC5B,SAAK,QAAL,GAAgB,CAAhB;AACA,WAAO,SAAS,MAAT,CAAgB,CAAhB,CAAP;AACD;AACD,MAAI,KAAK,QAAL,GAAgB,CAAhB,IAAqB,IAAI,MAAJ,GAAa,CAAtC,EAAyC;AACvC,QAAI,CAAC,IAAI,CAAJ,IAAS,IAAV,MAAoB,IAAxB,EAA8B;AAC5B,WAAK,QAAL,GAAgB,CAAhB;AACA,aAAO,SAAS,MAAT,CAAgB,IAAI,CAApB,CAAP;AACD;AACD,QAAI,KAAK,QAAL,GAAgB,CAAhB,IAAqB,IAAI,MAAJ,GAAa,CAAtC,EAAyC;AACvC,UAAI,CAAC,IAAI,CAAJ,IAAS,IAAV,MAAoB,IAAxB,EAA8B;AAC5B,aAAK,QAAL,GAAgB,CAAhB;AACA,eAAO,SAAS,MAAT,CAAgB,IAAI,CAApB,CAAP;AACD;AACF;AACF;AACF;;AAED;AACA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,MAAI,IAAI,KAAK,SAAL,GAAiB,KAAK,QAA9B;AACA,MAAI,IAAI,oBAAoB,IAApB,EAA0B,GAA1B,EAA+B,CAA/B,CAAR;AACA,MAAI,MAAM,SAAV,EAAqB,OAAO,CAAP;AACrB,MAAI,KAAK,QAAL,IAAiB,IAAI,MAAzB,EAAiC;AAC/B,QAAI,IAAJ,CAAS,KAAK,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,KAAK,QAAnC;AACA,WAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,QAA5B,EAAsC,CAAtC,EAAyC,KAAK,SAA9C,CAAP;AACD;AACD,MAAI,IAAJ,CAAS,KAAK,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,IAAI,MAAlC;AACA,OAAK,QAAL,IAAiB,IAAI,MAArB;AACD;;AAED;AACA;AACA;AACA,SAAS,QAAT,CAAkB,GAAlB,EAAuB,CAAvB,EAA0B;AACxB,MAAI,QAAQ,oBAAoB,IAApB,EAA0B,GAA1B,EAA+B,CAA/B,CAAZ;AACA,MAAI,CAAC,KAAK,QAAV,EAAoB,OAAO,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAArB,CAAP;AACpB,OAAK,SAAL,GAAiB,KAAjB;AACA,MAAI,MAAM,IAAI,MAAJ,IAAc,QAAQ,KAAK,QAA3B,CAAV;AACA,MAAI,IAAJ,CAAS,KAAK,QAAd,EAAwB,CAAxB,EAA2B,GAA3B;AACA,SAAO,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAArB,EAAwB,GAAxB,CAAP;AACD;;AAED;AACA;AACA,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,MAAI,IAAI,OAAO,IAAI,MAAX,GAAoB,KAAK,KAAL,CAAW,GAAX,CAApB,GAAsC,EAA9C;AACA,MAAI,KAAK,QAAT,EAAmB,OAAO,IAAI,SAAS,MAAT,CAAgB,KAAK,SAAL,GAAiB,KAAK,QAAtC,CAAX;AACnB,SAAO,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA,SAAS,SAAT,CAAmB,GAAnB,EAAwB,CAAxB,EAA2B;AACzB,MAAI,CAAC,IAAI,MAAJ,GAAa,CAAd,IAAmB,CAAnB,KAAyB,CAA7B,EAAgC;AAC9B,QAAI,IAAI,IAAI,QAAJ,CAAa,SAAb,EAAwB,CAAxB,CAAR;AACA,QAAI,CAAJ,EAAO;AACL,UAAI,IAAI,EAAE,UAAF,CAAa,EAAE,MAAF,GAAW,CAAxB,CAAR;AACA,UAAI,KAAK,MAAL,IAAe,KAAK,MAAxB,EAAgC;AAC9B,aAAK,QAAL,GAAgB,CAAhB;AACA,aAAK,SAAL,GAAiB,CAAjB;AACA,aAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACA,aAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACA,eAAO,EAAE,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAP;AACD;AACF;AACD,WAAO,CAAP;AACD;AACD,OAAK,QAAL,GAAgB,CAAhB;AACA,OAAK,SAAL,GAAiB,CAAjB;AACA,OAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACA,SAAO,IAAI,QAAJ,CAAa,SAAb,EAAwB,CAAxB,EAA2B,IAAI,MAAJ,GAAa,CAAxC,CAAP;AACD;;AAED;AACA;AACA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,MAAI,IAAI,OAAO,IAAI,MAAX,GAAoB,KAAK,KAAL,CAAW,GAAX,CAApB,GAAsC,EAA9C;AACA,MAAI,KAAK,QAAT,EAAmB;AACjB,QAAI,MAAM,KAAK,SAAL,GAAiB,KAAK,QAAhC;AACA,WAAO,IAAI,KAAK,QAAL,CAAc,QAAd,CAAuB,SAAvB,EAAkC,CAAlC,EAAqC,GAArC,CAAX;AACD;AACD,SAAO,CAAP;AACD;;AAED,SAAS,UAAT,CAAoB,GAApB,EAAyB,CAAzB,EAA4B;AAC1B,MAAI,IAAI,CAAC,IAAI,MAAJ,GAAa,CAAd,IAAmB,CAA3B;AACA,MAAI,MAAM,CAAV,EAAa,OAAO,IAAI,QAAJ,CAAa,QAAb,EAAuB,CAAvB,CAAP;AACb,OAAK,QAAL,GAAgB,IAAI,CAApB;AACA,OAAK,SAAL,GAAiB,CAAjB;AACA,MAAI,MAAM,CAAV,EAAa;AACX,SAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACD,GAFD,MAEO;AACL,SAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACA,SAAK,QAAL,CAAc,CAAd,IAAmB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAnB;AACD;AACD,SAAO,IAAI,QAAJ,CAAa,QAAb,EAAuB,CAAvB,EAA0B,IAAI,MAAJ,GAAa,CAAvC,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB,MAAI,IAAI,OAAO,IAAI,MAAX,GAAoB,KAAK,KAAL,CAAW,GAAX,CAApB,GAAsC,EAA9C;AACA,MAAI,KAAK,QAAT,EAAmB,OAAO,IAAI,KAAK,QAAL,CAAc,QAAd,CAAuB,QAAvB,EAAiC,CAAjC,EAAoC,IAAI,KAAK,QAA7C,CAAX;AACnB,SAAO,CAAP;AACD;;AAED;AACA,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACxB,SAAO,IAAI,QAAJ,CAAa,KAAK,QAAlB,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB,SAAO,OAAO,IAAI,MAAX,GAAoB,KAAK,KAAL,CAAW,GAAX,CAApB,GAAsC,EAA7C;AACD","file":"string_decoder-compiled.js","sourcesContent":["'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return -1;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// UTF-8 replacement characters ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd'.repeat(p);\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd'.repeat(p + 1);\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd'.repeat(p + 2);\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character for each buffered byte of a (partial)\n// character needs to be added to the output.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd'.repeat(this.lastTotal - this.lastNeed);\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}"]}