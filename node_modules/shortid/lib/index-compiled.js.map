{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,YAAR,CAAf;AACA,IAAI,SAAS,QAAQ,UAAR,CAAb;AACA,IAAI,SAAS,QAAQ,UAAR,CAAb;AACA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;AACA,IAAI,UAAU,QAAQ,YAAR,CAAd;;AAEA;AACA;AACA;AACA;AACA,IAAI,kBAAkB,QAAQ,0BAAR,KAAuC,CAA7D;;AAEA;;;;;;AAMA,SAAS,IAAT,CAAc,SAAd,EAAyB;AACrB,WAAS,IAAT,CAAc,SAAd;AACA,SAAO,OAAO,OAAd;AACH;;AAED;;;;;;AAMA,SAAS,MAAT,CAAgB,QAAhB,EAA0B;AACtB,oBAAkB,QAAlB;AACA,SAAO,OAAO,OAAd;AACH;;AAED;;;;;AAKA,SAAS,UAAT,CAAoB,aAApB,EAAmC;AAC/B,MAAI,kBAAkB,SAAtB,EAAiC;AAC7B,aAAS,UAAT,CAAoB,aAApB;AACH;;AAED,SAAO,SAAS,QAAT,EAAP;AACH;;AAED;;;;AAIA,SAAS,QAAT,GAAoB;AAClB,SAAO,MAAM,eAAN,CAAP;AACD;;AAED;AACA,OAAO,OAAP,GAAiB,QAAjB;AACA,OAAO,OAAP,CAAe,QAAf,GAA0B,QAA1B;AACA,OAAO,OAAP,CAAe,IAAf,GAAsB,IAAtB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB;AACA,OAAO,OAAP,CAAe,UAAf,GAA4B,UAA5B;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB;AACA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar encode = require('./encode');\nvar decode = require('./decode');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.decode = decode;\nmodule.exports.isValid = isValid;\n"]}