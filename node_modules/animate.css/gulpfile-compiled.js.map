{"version":3,"sources":["gulpfile.js"],"names":[],"mappings":"AAAA;AACA,IAAI,eAAe,QAAQ,cAAR,CAAnB;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA;AACA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,QAAQ,QAAQ,WAAR,CAAZ;AACA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,UAAU,QAAQ,cAAR,CAAd;AACA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,cAAc,QAAQ,cAAR,CAAlB;;AAEA;AACA,IAAI,MAAM,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,cAAhB,CAAX,CAAV;AACA,IAAI,sBAAsB,oBAA1B;;AAEA;AACA,IAAI,OAAO;AACT,YAAU,IADD;AAET,cAAY,aAFH;;AAIT,gBAAc;AACZ,cAAU,CAAC,iBAAD,CADE;AAEZ,aAAS;AAFG,GAJL;;AAST,aAAW;AACT,YAAQ;AADC,GATF;;AAaT,UAAQ,CACN,qBADM,EAEN,KAFM,EAGN,iCAHM,EAIN,6BAJM,EAKN,wEALM,EAMN,IANM,EAON,qEAPM,EAQN,SARM,EASN,IATM,CASD,IATC;AAbC,CAAX;;AAyBA;AACA;AACA;;AAEA,KAAK,IAAL,CAAU,SAAV,EAAqB,YAAW;AAC9B,cAAY,WAAZ,EAAyB,WAAzB;AACD,CAFD;;AAIA,KAAK,IAAL,CAAU,WAAV,EAAuB,YAAW;AAChC,SAAO,KAAK,GAAL,CAAS,mBAAT,EACJ,IADI,CACC,OAAO,KAAK,UAAZ,CADD,EAEJ,IAFI,CAEC,QAAQ,CACZ,aAAa,KAAK,YAAlB,CADY,CAAR,CAFD,EAKJ,IALI,CAKC,KAAK,IAAL,CAAU,KAAK,QAAf,CALD,EAMJ,IANI,CAMC,QAAQ,CACZ,QAAQ,EAAC,cAAc,EAAC,WAAW,KAAZ,EAAf,EAAR,CADY,CAAR,CAND,EASJ,IATI,CASC,OAAO,KAAK,SAAZ,CATD,EAUJ,IAVI,CAUC,KAAK,IAAL,CAAU,KAAK,QAAf,CAVD,CAAP;AAWD,CAZD;;AAcA,KAAK,IAAL,CAAU,WAAV,EAAuB,YAAW;AAChC,SAAO,KAAK,GAAL,CAAS,OAAT,EACJ,IADI,CACC,OAAO,KAAK,MAAZ,EAAoB,GAApB,CADD,EAEJ,IAFI,CAEC,KAAK,IAAL,CAAU,KAAK,QAAf,CAFD,CAAP;AAGD,CAJD;;AAMA;AACA;AACA;;AAEA;AACA,SAAS,kBAAT,GAA8B;AAC5B,MAAI,aAAa,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,qBAAhB,CAAX,CAAjB;AAAA,MACE,QADF;AAAA,MACY,KADZ;AAAA,MACmB,IADnB;AAAA,MAEE,SAAS,CAAE,kBAAF,CAFX;AAAA,MAGE,QAAQ,CAHV;;AAKA,OAAK,QAAL,IAAiB,UAAjB,EAA6B;AAC3B,QAAI,WAAW,cAAX,CAA0B,QAA1B,CAAJ,EAAyC;AACvC,cAAQ,WAAW,QAAX,CAAR;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,eAAO,IAAP,CAAY,YAAY,QAAZ,GAAuB,GAAvB,GAA6B,MAAM,CAAN,CAA7B,GAAwC,MAApD;AACA,iBAAS,CAAT;AACD;AACF;AACF;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,GAAN,CAAU,0BAAV;AACD,GAFD,MAEO;AACL,UAAM,GAAN,CAAU,SAAS,QAAQ,CAAR,GAAY,aAAZ,GAA4B,YAArC,IAAqD,aAA/D;AACD;;AAED,SAAO,MAAP;AACD","file":"gulpfile-compiled.js","sourcesContent":["// Utilities\nvar autoprefixer = require('autoprefixer');\nvar cssnano = require('cssnano');\nvar fs = require('fs');\n\n// Gulp\nvar gulp = require('gulp');\n\n// Gulp plugins\nvar concat = require('gulp-concat');\nvar gutil = require('gulp-util');\nvar header = require('gulp-header');\nvar postcss = require('gulp-postcss');\nvar rename = require('gulp-rename');\nvar runSequence = require('run-sequence');\n\n// Misc/global vars\nvar pkg = JSON.parse(fs.readFileSync('package.json'));\nvar activatedAnimations = activateAnimations();\n\n// Task options\nvar opts = {\n  destPath: './',\n  concatName: 'animate.css',\n\n  autoprefixer: {\n    browsers: ['last 2 versions'],\n    cascade: false\n  },\n\n  minRename: {\n    suffix: '.min'\n  },\n\n  banner: [\n    '@charset \"UTF-8\";\\n',\n    '/*!',\n    ' * <%= name %> -<%= homepage %>',\n    ' * Version - <%= version %>',\n    ' * Licensed under the MIT license - http://opensource.org/licenses/MIT',\n    ' *',\n    ' * Copyright (c) <%= new Date().getFullYear() %> <%= author.name %>',\n    ' */\\n\\n'\n  ].join('\\n')\n};\n\n// ----------------------------\n// Gulp task definitions\n// ----------------------------\n\ngulp.task('default', function() {\n  runSequence('createCSS', 'addHeader');\n});\n\ngulp.task('createCSS', function() {\n  return gulp.src(activatedAnimations)\n    .pipe(concat(opts.concatName))\n    .pipe(postcss([\n      autoprefixer(opts.autoprefixer)\n    ]))\n    .pipe(gulp.dest(opts.destPath))\n    .pipe(postcss([\n      cssnano({reduceIdents: {keyframes: false}})\n    ]))\n    .pipe(rename(opts.minRename))\n    .pipe(gulp.dest(opts.destPath));\n});\n\ngulp.task('addHeader', function() {\n  return gulp.src('*.css')\n    .pipe(header(opts.banner, pkg))\n    .pipe(gulp.dest(opts.destPath));\n});\n\n// ----------------------------\n// Helpers/functions\n// ----------------------------\n\n// Read the config file and return an array of the animations to be activated\nfunction activateAnimations() {\n  var categories = JSON.parse(fs.readFileSync('animate-config.json')),\n    category, files, file,\n    target = [ 'source/_base.css' ],\n    count = 0;\n\n  for (category in categories) {\n    if (categories.hasOwnProperty(category)) {\n      files = categories[category];\n\n      for (var i = 0; i < files.length; ++i) {\n        target.push('source/' + category + '/' + files[i] + '.css');\n        count += 1;\n      }\n    }\n  }\n\n  if (!count) {\n    gutil.log('No animations activated.');\n  } else {\n    gutil.log(count + (count > 1 ? ' animations' : ' animation') + ' activated.');\n  }\n\n  return target;\n}\n"]}