{"version":3,"sources":["_baseIsTypedArray.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,eAAR,CAAjB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;AAAA,IAEI,eAAe,QAAQ,gBAAR,CAFnB;;AAIA;AACA,IAAI,UAAU,oBAAd;AAAA,IACI,WAAW,gBADf;AAAA,IAEI,UAAU,kBAFd;AAAA,IAGI,UAAU,eAHd;AAAA,IAII,WAAW,gBAJf;AAAA,IAKI,UAAU,mBALd;AAAA,IAMI,SAAS,cANb;AAAA,IAOI,YAAY,iBAPhB;AAAA,IAQI,YAAY,iBARhB;AAAA,IASI,YAAY,iBAThB;AAAA,IAUI,SAAS,cAVb;AAAA,IAWI,YAAY,iBAXhB;AAAA,IAYI,aAAa,kBAZjB;;AAcA,IAAI,iBAAiB,sBAArB;AAAA,IACI,cAAc,mBADlB;AAAA,IAEI,aAAa,uBAFjB;AAAA,IAGI,aAAa,uBAHjB;AAAA,IAII,UAAU,oBAJd;AAAA,IAKI,WAAW,qBALf;AAAA,IAMI,WAAW,qBANf;AAAA,IAOI,WAAW,qBAPf;AAAA,IAQI,kBAAkB,4BARtB;AAAA,IASI,YAAY,sBAThB;AAAA,IAUI,YAAY,sBAVhB;;AAYA;AACA,IAAI,iBAAiB,EAArB;AACA,eAAe,UAAf,IAA6B,eAAe,UAAf,IAC7B,eAAe,OAAf,IAA0B,eAAe,QAAf,IAC1B,eAAe,QAAf,IAA2B,eAAe,QAAf,IAC3B,eAAe,eAAf,IAAkC,eAAe,SAAf,IAClC,eAAe,SAAf,IAA4B,IAJ5B;AAKA,eAAe,OAAf,IAA0B,eAAe,QAAf,IAC1B,eAAe,cAAf,IAAiC,eAAe,OAAf,IACjC,eAAe,WAAf,IAA8B,eAAe,OAAf,IAC9B,eAAe,QAAf,IAA2B,eAAe,OAAf,IAC3B,eAAe,MAAf,IAAyB,eAAe,SAAf,IACzB,eAAe,SAAf,IAA4B,eAAe,SAAf,IAC5B,eAAe,MAAf,IAAyB,eAAe,SAAf,IACzB,eAAe,UAAf,IAA6B,KAP7B;;AASA;;;;;;;AAOA,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AAC/B,WAAO,aAAa,KAAb,KACL,SAAS,MAAM,MAAf,CADK,IACqB,CAAC,CAAC,eAAe,WAAW,KAAX,CAAf,CAD9B;AAED;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"_baseIsTypedArray-compiled.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n"]}