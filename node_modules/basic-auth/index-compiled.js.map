{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;;;AAQA;;AAEA;;;;;;AAKA,OAAO,OAAP,GAAiB,IAAjB;AACA,OAAO,OAAP,CAAe,KAAf,GAAuB,KAAvB;;AAEA;;;;;;;;;AASA,IAAI,qBAAqB,wDAAzB;;AAEA;;;;;;;;;AASA,IAAI,mBAAmB,gBAAvB;;AAEA;;;;;;;;AAQA,SAAS,IAAT,CAAe,GAAf,EAAoB;AAClB,MAAI,CAAC,GAAL,EAAU;AACR,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAI,QAAO,GAAP,yCAAO,GAAP,OAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAI,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED;AACA,MAAI,SAAS,iBAAiB,IAAI,GAAJ,IAAW,GAA5B,CAAb;;AAEA;AACA,SAAO,MAAM,MAAN,CAAP;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,QAAhB,EAA0B,QAA1B,EAAP;AACD;;AAED;;;;;AAKA,SAAS,gBAAT,CAA2B,GAA3B,EAAgC;AAC9B,MAAI,CAAC,IAAI,OAAL,IAAgB,QAAO,IAAI,OAAX,MAAuB,QAA3C,EAAqD;AACnD,UAAM,IAAI,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED,SAAO,IAAI,OAAJ,CAAY,aAAnB;AACD;;AAED;;;;;;;;AAQA,SAAS,KAAT,CAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,SAAP;AACD;;AAED;AACA,MAAI,QAAQ,mBAAmB,IAAnB,CAAwB,MAAxB,CAAZ;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,SAAP;AACD;;AAED;AACA,MAAI,WAAW,iBAAiB,IAAjB,CAAsB,aAAa,MAAM,CAAN,CAAb,CAAtB,CAAf;;AAEA,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,SAAP;AACD;;AAED;AACA,SAAO,IAAI,WAAJ,CAAgB,SAAS,CAAT,CAAhB,EAA6B,SAAS,CAAT,CAA7B,CAAP;AACD;;AAED;;;;;AAKA,SAAS,WAAT,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAChC,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,IAAL,GAAY,IAAZ;AACD","file":"index-compiled.js","sourcesContent":["/*!\n * basic-auth\n * Copyright(c) 2013 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = auth\nmodule.exports.parse = parse\n\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\n\nvar CREDENTIALS_REGEXP = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$/\n\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar USER_PASS_REGEXP = /^([^:]*):(.*)$/\n\n/**\n * Parse the Authorization header field of a request.\n *\n * @param {object} req\n * @return {object} with .name and .pass\n * @public\n */\n\nfunction auth (req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  if (typeof req !== 'object') {\n    throw new TypeError('argument req is required to be an object')\n  }\n\n  // get header\n  var header = getAuthorization(req.req || req)\n\n  // parse header\n  return parse(header)\n}\n\n/**\n * Decode base64 string.\n * @private\n */\n\nfunction decodeBase64 (str) {\n  return new Buffer(str, 'base64').toString()\n}\n\n/**\n * Get the Authorization header from request object.\n * @private\n */\n\nfunction getAuthorization (req) {\n  if (!req.headers || typeof req.headers !== 'object') {\n    throw new TypeError('argument req is required to have headers property')\n  }\n\n  return req.headers.authorization\n}\n\n/**\n * Parse basic auth to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (typeof string !== 'string') {\n    return undefined\n  }\n\n  // parse header\n  var match = CREDENTIALS_REGEXP.exec(string)\n\n  if (!match) {\n    return undefined\n  }\n\n  // decode user pass\n  var userPass = USER_PASS_REGEXP.exec(decodeBase64(match[1]))\n\n  if (!userPass) {\n    return undefined\n  }\n\n  // return credentials object\n  return new Credentials(userPass[1], userPass[2])\n}\n\n/**\n * Object to represent user credentials.\n * @private\n */\n\nfunction Credentials (name, pass) {\n  this.name = name\n  this.pass = pass\n}\n"]}