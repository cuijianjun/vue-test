{"version":3,"sources":["debounce.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;;;;;;;;;;;;;;AAcA,OAAO,OAAP,GAAiB,UAAW,KAAX,EAAkB,OAAlB,EAA2B,QAA3B,EAAsC;AACtD,SAAO,aAAa,SAAb,GAAyB,SAAS,KAAT,EAAgB,OAAhB,EAAyB,KAAzB,CAAzB,GAA2D,SAAS,KAAT,EAAgB,QAAhB,EAA0B,YAAY,KAAtC,CAAlE;AACA,CAFD","file":"debounce-compiled.js","sourcesContent":["/* eslint-disable no-undefined */\n\nvar throttle = require('./throttle');\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  atBegin       Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\nmodule.exports = function ( delay, atBegin, callback ) {\n\treturn callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n};\n"]}