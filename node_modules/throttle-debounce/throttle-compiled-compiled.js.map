{"version":3,"sources":["throttle-compiled.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,OAAP,GAAiB,UAAU,KAAV,EAAiB,UAAjB,EAA6B,QAA7B,EAAuC,YAAvC,EAAqD;;AAErE;AACA;AACA;AACA,KAAI,SAAJ;;AAEA;AACA,KAAI,WAAW,CAAf;;AAEA;AACA,KAAI,OAAO,UAAP,KAAsB,SAA1B,EAAqC;AACpC,iBAAe,QAAf;AACA,aAAW,UAAX;AACA,eAAa,SAAb;AACA;;AAED;AACA;AACA;AACA,UAAS,OAAT,GAAmB;;AAElB,MAAI,OAAO,IAAX;AACA,MAAI,UAAU,OAAO,IAAI,IAAJ,EAAP,IAAqB,QAAnC;AACA,MAAI,OAAO,SAAX;;AAEA;AACA,WAAS,IAAT,GAAgB;AACf,cAAW,OAAO,IAAI,IAAJ,EAAP,CAAX;AACA,YAAS,KAAT,CAAe,IAAf,EAAqB,IAArB;AACA;;AAED;AACA;AACA,WAAS,KAAT,GAAiB;AAChB,eAAY,SAAZ;AACA;;AAED,MAAI,gBAAgB,CAAC,SAArB,EAAgC;AAC/B;AACA;AACA;AACA;;AAED;AACA,MAAI,SAAJ,EAAe;AACd,gBAAa,SAAb;AACA;;AAED,MAAI,iBAAiB,SAAjB,IAA8B,UAAU,KAA5C,EAAmD;AAClD;AACA;AACA;AACA,GAJD,MAIO,IAAI,eAAe,IAAnB,EAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAY,WAAW,eAAe,KAAf,GAAuB,IAAlC,EAAwC,iBAAiB,SAAjB,GAA6B,QAAQ,OAArC,GAA+C,KAAvF,CAAZ;AACA;AACD;;AAED;AACA,QAAO,OAAP;AACA,CArED;;AAuEA","file":"throttle-compiled-compiled.js","sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   noTrailing     Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   debounceMode   If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nmodule.exports = function (delay, noTrailing, callback, debounceMode) {\n\n\t// After wrapper has stopped being called, this timeout ensures that\n\t// `callback` is executed at the proper times in `throttle` and `end`\n\t// debounce modes.\n\tvar timeoutID;\n\n\t// Keep track of the last time `callback` was executed.\n\tvar lastExec = 0;\n\n\t// `noTrailing` defaults to falsy.\n\tif (typeof noTrailing !== 'boolean') {\n\t\tdebounceMode = callback;\n\t\tcallback = noTrailing;\n\t\tnoTrailing = undefined;\n\t}\n\n\t// The `wrapper` function encapsulates all of the throttling / debouncing\n\t// functionality and when executed will limit the rate at which `callback`\n\t// is executed.\n\tfunction wrapper() {\n\n\t\tvar self = this;\n\t\tvar elapsed = Number(new Date()) - lastExec;\n\t\tvar args = arguments;\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Number(new Date());\n\t\t\tcallback.apply(self, args);\n\t\t}\n\n\t\t// If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t// to allow future `callback` executions.\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (debounceMode && !timeoutID) {\n\t\t\t// Since `wrapper` is being called for the first time and\n\t\t\t// `debounceMode` is true (at begin), execute `callback`.\n\t\t\texec();\n\t\t}\n\n\t\t// Clear any existing timeout.\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\t// In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t// `callback`.\n\t\t\texec();\n\t\t} else if (noTrailing !== true) {\n\t\t\t// In trailing throttle mode, since `delay` time has not been\n\t\t\t// exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t// recent execution.\n\t\t\t//\n\t\t\t// If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t// after `delay` ms.\n\t\t\t//\n\t\t\t// If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t// execute after `delay` ms.\n\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n\t\t}\n\t}\n\n\t// Return the wrapper function.\n\treturn wrapper;\n};\n\n//# sourceMappingURL=throttle-compiled.js.map"]}