{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,UAAU,QAAQ,SAAR,CAAd;;AAEA;;;AAGA,OAAO,OAAP,GAAiB,YAAjB;AACA,OAAO,OAAP,CAAe,KAAf,GAAuB,KAAvB;AACA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB;AACA,OAAO,OAAP,CAAe,gBAAf,GAAkC,gBAAlC;AACA,OAAO,OAAP,CAAe,cAAf,GAAgC,cAAhC;;AAEA;;;;;AAKA,IAAI,cAAc,IAAI,MAAJ,CAAW;AAC3B;AACA;AACA,SAH2B;AAI3B;AACA;AACA;AACA;AACA;AACA;AACA,wGAV2B,EAW3B,IAX2B,CAWtB,GAXsB,CAAX,EAWL,GAXK,CAAlB;;AAaA;;;;;;;AAOA,SAAS,KAAT,CAAgB,GAAhB,EAAqB,OAArB,EAA8B;AAC5B,MAAI,SAAS,EAAb;AACA,MAAI,MAAM,CAAV;AACA,MAAI,QAAQ,CAAZ;AACA,MAAI,OAAO,EAAX;AACA,MAAI,mBAAmB,WAAW,QAAQ,SAAnB,IAAgC,GAAvD;AACA,MAAI,GAAJ;;AAEA,SAAO,CAAC,MAAM,YAAY,IAAZ,CAAiB,GAAjB,CAAP,KAAiC,IAAxC,EAA8C;AAC5C,QAAI,IAAI,IAAI,CAAJ,CAAR;AACA,QAAI,UAAU,IAAI,CAAJ,CAAd;AACA,QAAI,SAAS,IAAI,KAAjB;AACA,YAAQ,IAAI,KAAJ,CAAU,KAAV,EAAiB,MAAjB,CAAR;AACA,YAAQ,SAAS,EAAE,MAAnB;;AAEA;AACA,QAAI,OAAJ,EAAa;AACX,cAAQ,QAAQ,CAAR,CAAR;AACA;AACD;;AAED,QAAI,OAAO,IAAI,KAAJ,CAAX;AACA,QAAI,SAAS,IAAI,CAAJ,CAAb;AACA,QAAI,OAAO,IAAI,CAAJ,CAAX;AACA,QAAI,UAAU,IAAI,CAAJ,CAAd;AACA,QAAI,QAAQ,IAAI,CAAJ,CAAZ;AACA,QAAI,WAAW,IAAI,CAAJ,CAAf;AACA,QAAI,WAAW,IAAI,CAAJ,CAAf;;AAEA;AACA,QAAI,IAAJ,EAAU;AACR,aAAO,IAAP,CAAY,IAAZ;AACA,aAAO,EAAP;AACD;;AAED,QAAI,UAAU,UAAU,IAAV,IAAkB,QAAQ,IAA1B,IAAkC,SAAS,MAAzD;AACA,QAAI,SAAS,aAAa,GAAb,IAAoB,aAAa,GAA9C;AACA,QAAI,WAAW,aAAa,GAAb,IAAoB,aAAa,GAAhD;AACA,QAAI,YAAY,IAAI,CAAJ,KAAU,gBAA1B;AACA,QAAI,UAAU,WAAW,KAAzB;;AAEA,WAAO,IAAP,CAAY;AACV,YAAM,QAAQ,KADJ;AAEV,cAAQ,UAAU,EAFR;AAGV,iBAAW,SAHD;AAIV,gBAAU,QAJA;AAKV,cAAQ,MALE;AAMV,eAAS,OANC;AAOV,gBAAU,CAAC,CAAC,QAPF;AAQV,eAAS,UAAU,YAAY,OAAZ,CAAV,GAAkC,WAAW,IAAX,GAAkB,OAAO,aAAa,SAAb,CAAP,GAAiC;AARpF,KAAZ;AAUD;;AAED;AACA,MAAI,QAAQ,IAAI,MAAhB,EAAwB;AACtB,YAAQ,IAAI,MAAJ,CAAW,KAAX,CAAR;AACD;;AAED;AACA,MAAI,IAAJ,EAAU;AACR,WAAO,IAAP,CAAY,IAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAED;;;;;;;AAOA,SAAS,OAAT,CAAkB,GAAlB,EAAuB,OAAvB,EAAgC;AAC9B,SAAO,iBAAiB,MAAM,GAAN,EAAW,OAAX,CAAjB,CAAP;AACD;;AAED;;;;;;AAMA,SAAS,wBAAT,CAAmC,GAAnC,EAAwC;AACtC,SAAO,UAAU,GAAV,EAAe,OAAf,CAAuB,SAAvB,EAAkC,UAAU,CAAV,EAAa;AACpD,WAAO,MAAM,EAAE,UAAF,CAAa,CAAb,EAAgB,QAAhB,CAAyB,EAAzB,EAA6B,WAA7B,EAAb;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;AAMA,SAAS,cAAT,CAAyB,GAAzB,EAA8B;AAC5B,SAAO,UAAU,GAAV,EAAe,OAAf,CAAuB,OAAvB,EAAgC,UAAU,CAAV,EAAa;AAClD,WAAO,MAAM,EAAE,UAAF,CAAa,CAAb,EAAgB,QAAhB,CAAyB,EAAzB,EAA6B,WAA7B,EAAb;AACD,GAFM,CAAP;AAGD;;AAED;;;AAGA,SAAS,gBAAT,CAA2B,MAA3B,EAAmC;AACjC;AACA,MAAI,UAAU,IAAI,KAAJ,CAAU,OAAO,MAAjB,CAAd;;AAEA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,QAAI,QAAO,OAAO,CAAP,CAAP,MAAqB,QAAzB,EAAmC;AACjC,cAAQ,CAAR,IAAa,IAAI,MAAJ,CAAW,SAAS,OAAO,CAAP,EAAU,OAAnB,GAA6B,IAAxC,CAAb;AACD;AACF;;AAED,SAAO,UAAU,GAAV,EAAe,IAAf,EAAqB;AAC1B,QAAI,OAAO,EAAX;AACA,QAAI,OAAO,OAAO,EAAlB;AACA,QAAI,UAAU,QAAQ,EAAtB;AACA,QAAI,SAAS,QAAQ,MAAR,GAAiB,wBAAjB,GAA4C,kBAAzD;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,UAAI,QAAQ,OAAO,CAAP,CAAZ;;AAEA,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,gBAAQ,KAAR;;AAEA;AACD;;AAED,UAAI,QAAQ,KAAK,MAAM,IAAX,CAAZ;AACA,UAAI,OAAJ;;AAEA,UAAI,SAAS,IAAb,EAAmB;AACjB,YAAI,MAAM,QAAV,EAAoB;AAClB;AACA,cAAI,MAAM,OAAV,EAAmB;AACjB,oBAAQ,MAAM,MAAd;AACD;;AAED;AACD,SAPD,MAOO;AACL,gBAAM,IAAI,SAAJ,CAAc,eAAe,MAAM,IAArB,GAA4B,iBAA1C,CAAN;AACD;AACF;;AAED,UAAI,QAAQ,KAAR,CAAJ,EAAoB;AAClB,YAAI,CAAC,MAAM,MAAX,EAAmB;AACjB,gBAAM,IAAI,SAAJ,CAAc,eAAe,MAAM,IAArB,GAA4B,iCAA5B,GAAgE,gBAAe,KAAf,CAAhE,GAAwF,GAAtG,CAAN;AACD;;AAED,YAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,cAAI,MAAM,QAAV,EAAoB;AAClB;AACD,WAFD,MAEO;AACL,kBAAM,IAAI,SAAJ,CAAc,eAAe,MAAM,IAArB,GAA4B,mBAA1C,CAAN;AACD;AACF;;AAED,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,oBAAU,OAAO,MAAM,CAAN,CAAP,CAAV;;AAEA,cAAI,CAAC,QAAQ,CAAR,EAAW,IAAX,CAAgB,OAAhB,CAAL,EAA+B;AAC7B,kBAAM,IAAI,SAAJ,CAAc,mBAAmB,MAAM,IAAzB,GAAgC,cAAhC,GAAiD,MAAM,OAAvD,GAAiE,mBAAjE,GAAuF,gBAAe,OAAf,CAAvF,GAAiH,GAA/H,CAAN;AACD;;AAED,kBAAQ,CAAC,MAAM,CAAN,GAAU,MAAM,MAAhB,GAAyB,MAAM,SAAhC,IAA6C,OAArD;AACD;;AAED;AACD;;AAED,gBAAU,MAAM,QAAN,GAAiB,eAAe,KAAf,CAAjB,GAAyC,OAAO,KAAP,CAAnD;;AAEA,UAAI,CAAC,QAAQ,CAAR,EAAW,IAAX,CAAgB,OAAhB,CAAL,EAA+B;AAC7B,cAAM,IAAI,SAAJ,CAAc,eAAe,MAAM,IAArB,GAA4B,cAA5B,GAA6C,MAAM,OAAnD,GAA6D,mBAA7D,GAAmF,OAAnF,GAA6F,GAA3G,CAAN;AACD;;AAED,cAAQ,MAAM,MAAN,GAAe,OAAvB;AACD;;AAED,WAAO,IAAP;AACD,GAnED;AAoED;;AAED;;;;;;AAMA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,IAAI,OAAJ,CAAY,4BAAZ,EAA0C,MAA1C,CAAP;AACD;;AAED;;;;;;AAMA,SAAS,WAAT,CAAsB,KAAtB,EAA6B;AAC3B,SAAO,MAAM,OAAN,CAAc,eAAd,EAA+B,MAA/B,CAAP;AACD;;AAED;;;;;;;AAOA,SAAS,UAAT,CAAqB,EAArB,EAAyB,IAAzB,EAA+B;AAC7B,KAAG,IAAH,GAAU,IAAV;AACA,SAAO,EAAP;AACD;;AAED;;;;;;AAMA,SAAS,KAAT,CAAgB,OAAhB,EAAyB;AACvB,SAAO,QAAQ,SAAR,GAAoB,EAApB,GAAyB,GAAhC;AACD;;AAED;;;;;;;AAOA,SAAS,cAAT,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC;AACnC;AACA,MAAI,SAAS,KAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,CAAb;;AAEA,MAAI,MAAJ,EAAY;AACV,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,WAAK,IAAL,CAAU;AACR,cAAM,CADE;AAER,gBAAQ,IAFA;AAGR,mBAAW,IAHH;AAIR,kBAAU,KAJF;AAKR,gBAAQ,KALA;AAMR,iBAAS,KAND;AAOR,kBAAU,KAPF;AAQR,iBAAS;AARD,OAAV;AAUD;AACF;;AAED,SAAO,WAAW,IAAX,EAAiB,IAAjB,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,aAAT,CAAwB,IAAxB,EAA8B,IAA9B,EAAoC,OAApC,EAA6C;AAC3C,MAAI,QAAQ,EAAZ;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,UAAM,IAAN,CAAW,aAAa,KAAK,CAAL,CAAb,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,MAAhD;AACD;;AAED,MAAI,SAAS,IAAI,MAAJ,CAAW,QAAQ,MAAM,IAAN,CAAW,GAAX,CAAR,GAA0B,GAArC,EAA0C,MAAM,OAAN,CAA1C,CAAb;;AAEA,SAAO,WAAW,MAAX,EAAmB,IAAnB,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,cAAT,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC,OAArC,EAA8C;AAC5C,SAAO,eAAe,MAAM,IAAN,EAAY,OAAZ,CAAf,EAAqC,IAArC,EAA2C,OAA3C,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,cAAT,CAAyB,MAAzB,EAAiC,IAAjC,EAAuC,OAAvC,EAAgD;AAC9C,MAAI,CAAC,QAAQ,IAAR,CAAL,EAAoB;AAClB,cAAU,sBAAwB,QAAQ,OAA1C;AACA,WAAO,EAAP;AACD;;AAED,YAAU,WAAW,EAArB;;AAEA,MAAI,SAAS,QAAQ,MAArB;AACA,MAAI,MAAM,QAAQ,GAAR,KAAgB,KAA1B;AACA,MAAI,QAAQ,EAAZ;;AAEA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,QAAI,QAAQ,OAAO,CAAP,CAAZ;;AAEA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAS,aAAa,KAAb,CAAT;AACD,KAFD,MAEO;AACL,UAAI,SAAS,aAAa,MAAM,MAAnB,CAAb;AACA,UAAI,UAAU,QAAQ,MAAM,OAAd,GAAwB,GAAtC;;AAEA,WAAK,IAAL,CAAU,KAAV;;AAEA,UAAI,MAAM,MAAV,EAAkB;AAChB,mBAAW,QAAQ,MAAR,GAAiB,OAAjB,GAA2B,IAAtC;AACD;;AAED,UAAI,MAAM,QAAV,EAAoB;AAClB,YAAI,CAAC,MAAM,OAAX,EAAoB;AAClB,oBAAU,QAAQ,MAAR,GAAiB,GAAjB,GAAuB,OAAvB,GAAiC,KAA3C;AACD,SAFD,MAEO;AACL,oBAAU,SAAS,GAAT,GAAe,OAAf,GAAyB,IAAnC;AACD;AACF,OAND,MAMO;AACL,kBAAU,SAAS,GAAT,GAAe,OAAf,GAAyB,GAAnC;AACD;;AAED,eAAS,OAAT;AACD;AACF;;AAED,MAAI,YAAY,aAAa,QAAQ,SAAR,IAAqB,GAAlC,CAAhB;AACA,MAAI,oBAAoB,MAAM,KAAN,CAAY,CAAC,UAAU,MAAvB,MAAmC,SAA3D;;AAEA;AACA;AACA;AACA;AACA,MAAI,CAAC,MAAL,EAAa;AACX,YAAQ,CAAC,oBAAoB,MAAM,KAAN,CAAY,CAAZ,EAAe,CAAC,UAAU,MAA1B,CAApB,GAAwD,KAAzD,IAAkE,KAAlE,GAA0E,SAA1E,GAAsF,SAA9F;AACD;;AAED,MAAI,GAAJ,EAAS;AACP,aAAS,GAAT;AACD,GAFD,MAEO;AACL;AACA;AACA,aAAS,UAAU,iBAAV,GAA8B,EAA9B,GAAmC,QAAQ,SAAR,GAAoB,KAAhE;AACD;;AAED,SAAO,WAAW,IAAI,MAAJ,CAAW,MAAM,KAAjB,EAAwB,MAAM,OAAN,CAAxB,CAAX,EAAoD,IAApD,CAAP;AACD;;AAED;;;;;;;;;;;;AAYA,SAAS,YAAT,CAAuB,IAAvB,EAA6B,IAA7B,EAAmC,OAAnC,EAA4C;AAC1C,MAAI,CAAC,QAAQ,IAAR,CAAL,EAAoB;AAClB,cAAU,sBAAwB,QAAQ,OAA1C;AACA,WAAO,EAAP;AACD;;AAED,YAAU,WAAW,EAArB;;AAEA,MAAI,gBAAgB,MAApB,EAA4B;AAC1B,WAAO,eAAe,IAAf,EAAqB,qBAAuB,IAA5C,CAAP;AACD;;AAED,MAAI,QAAQ,IAAR,CAAJ,EAAmB;AACjB,WAAO,eAAc,qBAAuB,IAArC,EAA4C,qBAAuB,IAAnE,EAA0E,OAA1E,CAAP;AACD;;AAED,SAAO,gBAAe,qBAAuB,IAAtC,EAA6C,qBAAuB,IAApE,EAA2E,OAA3E,CAAP;AACD","file":"index-compiled.js","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]}