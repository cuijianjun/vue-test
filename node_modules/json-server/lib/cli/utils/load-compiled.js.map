{"version":3,"sources":["load.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,MAAM,QAAQ,OAAR,CAAV;AACA,IAAI,YAAY,QAAQ,+BAAR,CAAhB;AACA,IAAI,KAAK,QAAQ,MAAR,CAAT;;AAEA,OAAO,OAAP,GAAiB,UAAU,MAAV,EAAkB,EAAlB,EAAsB;AACrC,MAAI,GAAG,GAAH,CAAO,MAAP,CAAJ,EAAoB;AAClB;AACA,QAAI,OAAO;AACT,WAAK,MADI;AAET,YAAM;AAFG,KAAX;;AAKA,YAAQ,IAAR,EAAc,UAAU,GAAV,EAAe,QAAf,EAAyB;AACrC,UAAI,GAAJ,EAAS,OAAO,GAAG,GAAH,CAAP;AACT,SAAG,IAAH,EAAS,SAAS,IAAlB;AACD,KAHD;AAID,GAXD,MAWO,IAAI,GAAG,EAAH,CAAM,MAAN,CAAJ,EAAmB;AACxB;AACA,QAAI,WAAW,KAAK,OAAL,CAAa,MAAb,CAAf;AACA,WAAO,QAAQ,KAAR,CAAc,QAAd,CAAP;AACA,QAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,QAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAI,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAED;AACA,QAAI,OAAO,QAAX;AACA,OAAG,IAAH,EAAS,IAAT;AACD,GAbM,MAaA,IAAI,GAAG,IAAH,CAAQ,MAAR,CAAJ,EAAqB;AAC1B;AACA,QAAI,QAAQ,IAAI,MAAJ,EAAY,EAAE,SAAS,SAAX,EAAZ,EAAoC,QAApC,EAAZ;AACA,OAAG,IAAH,EAAS,KAAT;AACD,GAJM,MAIA;AACL,UAAM,IAAI,KAAJ,CAAW,sBAAqB,MAAO,EAAvC,CAAN;AACD;AACF,CAhCD","file":"load-compiled.js","sourcesContent":["'use strict';\n\nvar path = require('path');\nvar request = require('request');\nvar low = require('lowdb');\nvar fileAsync = require('lowdb/lib/storages/file-async');\nvar is = require('./is');\n\nmodule.exports = function (source, cb) {\n  if (is.URL(source)) {\n    // Load remote data\n    var opts = {\n      url: source,\n      json: true\n    };\n\n    request(opts, function (err, response) {\n      if (err) return cb(err);\n      cb(null, response.body);\n    });\n  } else if (is.JS(source)) {\n    // Clear cache\n    var filename = path.resolve(source);\n    delete require.cache[filename];\n    var dataFn = require(filename);\n\n    if (typeof dataFn !== 'function') {\n      throw new Error('The database is a JavaScript file but the export is not a function.');\n    }\n\n    // Run dataFn to generate data\n    var data = dataFn();\n    cb(null, data);\n  } else if (is.JSON(source)) {\n    // Load JSON using lowdb\n    var _data = low(source, { storage: fileAsync }).getState();\n    cb(null, _data);\n  } else {\n    throw new Error(`Unsupported source ${source}`);\n  }\n};"]}