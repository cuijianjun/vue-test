{"version":3,"sources":["run.js"],"names":[],"mappings":"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","file":"run-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar jph = require('json-parse-helpfulerror');\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar enableDestroy = require('server-destroy');\nvar pause = require('connect-pause');\nvar is = require('./utils/is');\nvar load = require('./utils/load');\nvar example = require('./example.json');\nvar jsonServer = require('../server');\n\nfunction prettyPrint(argv, object, rules) {\n  var host = argv.host === '0.0.0.0' ? 'localhost' : argv.host;\n  var port = argv.port;\n  var root = `http://${host}:${port}`;\n\n  console.log();\n  console.log(chalk.bold('  Resources'));\n  for (var prop in object) {\n    console.log(`  ${root}/${prop}`);\n  }\n\n  if (rules) {\n    console.log();\n    console.log(chalk.bold('  Other routes'));\n    for (var rule in rules) {\n      console.log(`  ${rule} -> ${rules[rule]}`);\n    }\n  }\n\n  console.log();\n  console.log(chalk.bold('  Home'));\n  console.log(`  ${root}`);\n  console.log();\n}\n\nfunction createApp(source, object, routes, middlewares, argv) {\n  var app = jsonServer.create();\n\n  var router = void 0;\n\n  var foreignKeySuffix = argv.foreignKeySuffix;\n\n  try {\n    router = jsonServer.router(is.JSON(source) ? source : object, foreignKeySuffix ? { foreignKeySuffix } : undefined);\n  } catch (e) {\n    console.log();\n    console.error(chalk.red(e.message.replace(/^/gm, '  ')));\n    process.exit(1);\n  }\n\n  var defaultsOpts = {\n    logger: !argv.quiet,\n    readOnly: argv.readOnly,\n    noCors: argv.noCors,\n    noGzip: argv.noGzip,\n    bodyParser: true\n  };\n\n  if (argv.static) {\n    defaultsOpts.static = path.join(process.cwd(), argv.static);\n  }\n\n  var defaults = jsonServer.defaults(defaultsOpts);\n  app.use(defaults);\n\n  if (routes) {\n    var rewriter = jsonServer.rewriter(routes);\n    app.use(rewriter);\n  }\n\n  if (middlewares) {\n    app.use(middlewares);\n  }\n\n  if (argv.delay) {\n    app.use(pause(argv.delay));\n  }\n\n  router.db._.id = argv.id;\n  app.db = router.db;\n  app.use(router);\n\n  return app;\n}\n\nmodule.exports = function (argv) {\n  var source = argv._[0];\n  var app = void 0;\n  var server = void 0;\n\n  if (!fs.existsSync(argv.snapshots)) {\n    console.log(`Error: snapshots directory ${argv.snapshots} doesn't exist`);\n    process.exit(1);\n  }\n\n  // noop log fn\n  if (argv.quiet) {\n    console.log = function () {};\n  }\n\n  console.log();\n  console.log(chalk.cyan('  \\\\{^_^}/ hi!'));\n\n  function start(cb) {\n    console.log();\n\n    // Be nice and create a default db.json if it doesn't exist\n    if (is.JSON(source) && !fs.existsSync(source)) {\n      console.log(chalk.yellow(`  Oops, ${source} doesn't seem to exist`));\n      console.log(chalk.yellow(`  Creating ${source} with some default data`));\n      console.log();\n      fs.writeFileSync(source, JSON.stringify(example, null, 2));\n    }\n\n    console.log(chalk.gray('  Loading', source));\n\n    // Load JSON, JS or HTTP database\n    load(source, function (err, data) {\n      if (err) throw err;\n\n      // Load additional routes\n      var routes = void 0;\n      if (argv.routes) {\n        console.log(chalk.gray('  Loading', argv.routes));\n        routes = JSON.parse(fs.readFileSync(argv.routes));\n      }\n\n      // Load middlewares\n      var middlewares = void 0;\n      if (argv.middlewares) {\n        middlewares = argv.middlewares.map(function (m) {\n          console.log(chalk.gray('  Loading', m));\n          return require(path.resolve(m));\n        });\n      }\n\n      // Done\n      console.log(chalk.gray('  Done'));\n\n      // Create app and server\n      app = createApp(source, data, routes, middlewares, argv);\n      server = app.listen(argv.port, argv.host);\n\n      // Enhance with a destroy function\n      enableDestroy(server);\n\n      // Display server informations\n      prettyPrint(argv, data, routes);\n\n      cb && cb();\n    });\n  }\n\n  // Start server\n  start(function () {\n    // Snapshot\n    console.log(chalk.gray('  Type s + enter at any time to create a snapshot of the database'));\n\n    // Support nohup\n    // https://github.com/typicode/json-server/issues/221\n    process.stdin.on('error', function () {\n      console.log(`  Error, can't read from stdin`);\n      console.log(`  Creating a snapshot from the CLI won't be possible`);\n    });\n    process.stdin.setEncoding('utf8');\n    process.stdin.on('data', function (chunk) {\n      if (chunk.trim().toLowerCase() === 's') {\n        var filename = `db-${Date.now()}.json`;\n        var file = path.join(argv.snapshots, filename);\n        var state = app.db.getState();\n        fs.writeFileSync(file, JSON.stringify(state, null, 2), 'utf-8');\n        console.log(`  Saved snapshot to ${path.relative(process.cwd(), file)}\\n`);\n      }\n    });\n\n    // Watch files\n    if (argv.watch) {\n      console.log(chalk.gray('  Watching...'));\n      console.log();\n      var _source = argv._[0];\n\n      // Can't watch URL\n      if (is.URL(_source)) throw new Error(\"Can't watch URL\");\n\n      // Watch .js or .json file\n      // Since lowdb uses atomic writing, directory is watched instead of file\n      var watchedDir = path.dirname(_source);\n      var readError = false;\n      fs.watch(watchedDir, function (event, file) {\n        // https://github.com/typicode/json-server/issues/420\n        // file can be null\n        if (file) {\n          var watchedFile = path.resolve(watchedDir, file);\n          if (watchedFile === path.resolve(_source)) {\n            if (is.JSON(watchedFile)) {\n              var obj = void 0;\n              try {\n                obj = jph.parse(fs.readFileSync(watchedFile));\n                if (readError) {\n                  console.log(chalk.green(`  Read error has been fixed :)`));\n                  readError = false;\n                }\n              } catch (e) {\n                readError = true;\n                console.log(chalk.red(`  Error reading ${watchedFile}`));\n                console.error(e.message);\n                return;\n              }\n\n              // Compare .json file content with in memory database\n              var isDatabaseDifferent = !_.isEqual(obj, app.db.getState());\n              if (isDatabaseDifferent) {\n                console.log(chalk.gray(`  ${_source} has changed, reloading...`));\n                server && server.destroy();\n                start();\n              }\n            }\n          }\n        }\n      });\n\n      // Watch routes\n      if (argv.routes) {\n        var _watchedDir = path.dirname(argv.routes);\n        fs.watch(_watchedDir, function (event, file) {\n          if (file) {\n            var watchedFile = path.resolve(_watchedDir, file);\n            if (watchedFile === path.resolve(argv.routes)) {\n              console.log(chalk.gray(`  ${argv.routes} has changed, reloading...`));\n              server && server.destroy();\n              start();\n            }\n          }\n        });\n      }\n    }\n  });\n};"]}