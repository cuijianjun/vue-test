{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;AAEA;;;;AAIA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,iBAAjB,CAAZ;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,cAAc,QAAQ,aAAR,CAAlB;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,OAAP,GAAiB,SAAS,cAAT,CAAyB,MAAzB,EAAiC,OAAjC,EAA0C;AACzD,MAAI,OAAO,WAAW,EAAtB;;AAEA;AACA,MAAI,MAAM,OAAO,MAAP,KAAkB,UAAlB,GACN,MADM,GAEN,aAAa,UAAU,wBAAvB,CAFJ;;AAIA;AACA,MAAI,UAAU,KAAK,OAAL,KAAiB,SAAjB,GACV,CAAC,MAAD,CADU,GAEV,KAAK,OAFT;;AAIA,SAAO,SAAS,cAAT,CAAyB,GAAzB,EAA8B,GAA9B,EAAmC,IAAnC,EAAyC;AAC9C,QAAI,MAAJ;AACA,QAAI,GAAJ;;AAEA,QAAI,cAAJ,GAAqB,IAAI,cAAJ,IAAsB,IAAI,MAA/C;;AAEA;AACA,QAAI,WAAW,QAAQ,OAAR,CAAgB,IAAI,cAApB,MAAwC,CAAC,CAAxD,EAA2D;AACzD,aAAO,MAAP;AACD;;AAED,UAAM,IAAI,GAAJ,EAAS,GAAT,CAAN;AACA,aAAS,MAAM,OAAN,CAAc,GAAd,IACL,IAAI,CAAJ,CADK,GAEL,GAFJ;;AAIA;AACA,QAAI,WAAW,SAAX,IAAwB,SAAS,MAAT,CAA5B,EAA8C;AAC5C,UAAI,MAAJ,GAAa,OAAO,WAAP,EAAb;AACA,YAAM,mBAAN,EAA2B,IAAI,cAA/B,EAA+C,IAAI,MAAnD;AACD;;AAED;AACD,GAvBD;AAwBD,CArCD;;AAuCA;;;;AAIA,SAAS,YAAT,CAAuB,GAAvB,EAA4B;AAC1B,MAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,WAAjB,OAAmC,IAAvC,EAA6C;AAC3C;AACA,WAAO,mBAAmB,GAAnB,CAAP;AACD;;AAED,SAAO,kBAAkB,GAAlB,CAAP;AACD;;AAED;;;;AAIA,SAAS,iBAAT,CAA4B,GAA5B,EAAiC;AAC/B,SAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzB,QAAI,MAAM,SAAS,GAAT,CAAV;AACA,QAAI,QAAQ,YAAY,KAAZ,CAAkB,IAAI,KAAJ,IAAa,EAA/B,CAAZ;AACA,WAAO,MAAM,GAAN,CAAP;AACD,GAJD;AAKD;;AAED;;;;AAIA,SAAS,kBAAT,CAA6B,GAA7B,EAAkC;AAChC,MAAI,SAAS,IAAI,WAAJ,EAAb;;AAEA,SAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzB;AACA,SAAK,GAAL,EAAU,GAAV;;AAEA;AACA,WAAO,CAAC,IAAI,OAAJ,CAAY,MAAZ,KAAuB,EAAxB,EAA4B,KAA5B,CAAkC,OAAlC,CAAP;AACD,GAND;AAOD;;AAED;;;;AAIA,SAAS,QAAT,CAAmB,MAAnB,EAA2B;AACzB,SAAO,UACL,OAAO,MAAP,KAAkB,QADb,IAEL,QAAQ,OAAR,CAAgB,OAAO,WAAP,EAAhB,MAA0C,CAAC,CAF7C;AAGD","file":"index-compiled.js","sourcesContent":["/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override')\nvar methods = require('methods')\nvar parseurl = require('parseurl')\nvar querystring = require('querystring')\nvar vary = require('vary')\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride (getter, options) {\n  var opts = options || {}\n\n  // get the getter fn\n  var get = typeof getter === 'function'\n    ? getter\n    : createGetter(getter || 'X-HTTP-Method-Override')\n\n  // get allowed request methods to examine\n  var methods = opts.methods === undefined\n    ? ['POST']\n    : opts.methods\n\n  return function methodOverride (req, res, next) {\n    var method\n    var val\n\n    req.originalMethod = req.originalMethod || req.method\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next()\n    }\n\n    val = get(req, res)\n    method = Array.isArray(val)\n      ? val[0]\n      : val\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase()\n      debug('override %s as %s', req.originalMethod, req.method)\n    }\n\n    next()\n  }\n}\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter (str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str)\n  }\n\n  return createQueryGetter(str)\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter (key) {\n  return function (req, res) {\n    var url = parseurl(req)\n    var query = querystring.parse(url.query || '')\n    return query[key]\n  }\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter (str) {\n  var header = str.toLowerCase()\n\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str)\n\n    // multiple headers get joined with comma by node.js core\n    return (req.headers[header] || '').split(/ *, */)\n  }\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports (method) {\n  return method &&\n    typeof method === 'string' &&\n    methods.indexOf(method.toLowerCase()) !== -1\n}\n"]}